package misc;

import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class Student_Attendance extends javax.swing.JFrame {

    /**
     * Creates new form class_attendance
     */
    public Student_Attendance() {
        initComponents();
        combobox();

    }

    String Month1;
    int day1;
    int year1;

    String Approve;

    void combobox() {

        String Query3 = "select * from classes_record;";
        String Query4 = "select * from tables_info;";

        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");
            //here sonoo is database name, root is username and password

            PreparedStatement stmt = con.prepareStatement(Query3);
            ResultSet r1 = stmt.executeQuery();

            PreparedStatement stmtt = con.prepareStatement(Query4);
            ResultSet r2 = stmtt.executeQuery();

            while (r1.next()) {
                String name = r1.getString("Class_name");
                CB_classattendanceinfo.addItem(name);
                CB_classaddattendance.addItem(name);
            }

            while (r2.next()) {
                String monthname = r2.getString("Attendance_Available_for_Month");

                int loop = 0;
                String studentorteacher = null;
                String month = null;

                for (String retval : monthname.split("_")) {

                    switch (loop) {
                        case 0:
                            studentorteacher = retval;
                            break;
                        case 1:
                            if ("attendance".equals(studentorteacher)) {
                                month = retval;
                                CB_monthsinfo.addItem(month);
                            }
                            break;
                        default:
                            break;
                    }
                    loop++;
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    void timerecieves(String Month, int day, int year) {
        Month1 = Month;
        day1 = day;
        year1 = year;

        date_lable.setText(day1 + " : " + Month1 + " : " + year1);
        jButton3.hide();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        CB_classattendanceinfo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        TF_rollno = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable_attendanceinfo = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        CB_monthsinfo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        Lable_name = new javax.swing.JLabel();
        TF_totalattendance = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        TF_persentage = new javax.swing.JLabel();
        TF_totalpresents = new javax.swing.JLabel();
        TF_totalabsents = new javax.swing.JLabel();
        current_month = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        CB_classaddattendance = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_attendance = new javax.swing.JTable();
        date_lable = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Student Attendance");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closingstudentattendance(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Student Attendance");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(407, 0, 202, 28);

        jLabel3.setText("Class :");

        CB_classattendanceinfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_classattendanceinfoActionPerformed(evt);
            }
        });

        jLabel4.setText("Rolll No:");

        TF_rollno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_rollnoActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        JTable_attendanceinfo.setAutoCreateRowSorter(true);
        JTable_attendanceinfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTable_attendanceinfo.setEditingColumn(5);
        jScrollPane1.setViewportView(JTable_attendanceinfo);
        if (JTable_attendanceinfo.getColumnModel().getColumnCount() > 0) {
            JTable_attendanceinfo.getColumnModel().getColumn(0).setResizable(false);
            JTable_attendanceinfo.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel9.setText("Month :");

        jLabel6.setText("Persentage:");

        jLabel12.setText("Total Presents :");

        jLabel13.setText("Total Absents :");

        jLabel14.setText("Total Attendance :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CB_classattendanceinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TF_rollno, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CB_monthsinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Lable_name, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(458, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(TF_totalattendance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(TF_totalpresents, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(TF_totalabsents, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(TF_persentage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(178, 178, 178))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CB_classattendanceinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(CB_monthsinfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(TF_rollno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lable_name, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_totalpresents, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_totalattendance, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_totalabsents, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TF_persentage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Attendance Info", jPanel1);

        current_month.setLayout(null);

        jLabel5.setText("Class :");
        current_month.add(jLabel5);
        jLabel5.setBounds(10, 15, 32, 14);

        CB_classaddattendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB_classaddattendanceActionPerformed(evt);
            }
        });
        current_month.add(CB_classaddattendance);
        CB_classaddattendance.setBounds(52, 12, 132, 20);

        Table_attendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Present", "Absent", "Leave"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table_attendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_attendanceMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table_attendance);
        if (Table_attendance.getColumnModel().getColumnCount() > 0) {
            Table_attendance.getColumnModel().getColumn(0).setResizable(false);
            Table_attendance.getColumnModel().getColumn(1).setResizable(false);
            Table_attendance.getColumnModel().getColumn(2).setResizable(false);
            Table_attendance.getColumnModel().getColumn(3).setResizable(false);
            Table_attendance.getColumnModel().getColumn(4).setResizable(false);
        }

        current_month.add(jScrollPane2);
        jScrollPane2.setBounds(10, 50, 925, 450);

        date_lable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        current_month.add(date_lable);
        date_lable.setBounds(745, 11, 190, 24);
        current_month.add(jLabel8);
        jLabel8.setBounds(549, 74, 94, 0);

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        current_month.add(jButton2);
        jButton2.setBounds(202, 11, 79, 23);

        jButton3.setText("SAVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        current_month.add(jButton3);
        jButton3.setBounds(299, 11, 73, 23);

        jTabbedPane1.addTab("Add Attendance", current_month);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 34, 950, 540);

        setSize(new java.awt.Dimension(966, 608));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CB_classattendanceinfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_classattendanceinfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_classattendanceinfoActionPerformed

    private void TF_rollnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_rollnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_rollnoActionPerformed

    private void CB_classaddattendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB_classaddattendanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB_classaddattendanceActionPerformed

    //this is the function that clear the rows from the table
    void Clearrows_Table_attendance() {

        //create connection with table in the Add attendance Tabbed Pane
        DefaultTableModel model1 = (DefaultTableModel) Table_attendance.getModel();

        //this is the loop that empty all the rows from the table
        while (model1.getRowCount() > 0) {
            for (int i = 0; i < model1.getRowCount(); i++) {
                model1.removeRow(i);

            }
        }
    }

    void Clearrows_attendance_info() {

        //create connection with table in the Add attendance Tabbed Pane
        DefaultTableModel model1 = (DefaultTableModel) JTable_attendanceinfo.getModel();

        //this is the loop that empty all the rows from the table
        while (model1.getRowCount() > 0) {
            for (int i = 0; i < model1.getRowCount(); i++) {
                model1.removeRow(i);
            }
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String table_name = "attendance_" + Month1 + "_" + year1;

        Approve = "Not_Available";

        String Query_table_checker = "select * from tables_info;";

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

            PreparedStatement stmt = con.prepareStatement(Query_table_checker);
            ResultSet r1 = stmt.executeQuery();

            while (r1.next()) {
                String attendanceinfo = r1.getString("Attendance_Available_for_Month");

                if (attendanceinfo == null ? table_name == null : attendanceinfo.equals(table_name)) {
                    Approve = "Available";
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        String Query4;
        String Query5 = null;
        String Query6 = null;

        if ("Available".equals(Approve)) {
            Query4 = "ALTER TABLE attendance_" + Month1 + "_" + year1 + " ADD Date_" + day1 + " Int default 1 ;";

        } else {
            Query4 = "create table attendance_" + Month1 + "_" + year1 + "(Class varchar(225) not null, Roll_no int(11) not null, Name varchar(225) not null);";

            Query5 = "ALTER TABLE attendance_" + Month1 + "_" + year1 + " ADD Date_" + day1 + " Int default 1;";
            Query6 = "insert into tables_info(Attendance_Available_for_Month) Values('" + table_name + "');";
        }

        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");
            java.sql.Statement stmt = con.createStatement();

            stmt.executeUpdate(Query4);

            if ("Not_Available".equals(Approve)) {

                stmt.executeUpdate(Query5);
                stmt.executeUpdate(Query6);

                String Query_add_student = "select * from student_admission;";
                try {

                    Class.forName("com.mysql.jdbc.Driver");
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

                    PreparedStatement stmtt = conn.prepareStatement(Query_add_student);
                    ResultSet r1 = stmtt.executeQuery();

                    while (r1.next()) {
                        String Studentinfo1 = r1.getString("roll_no");
                        String Studentinfo2 = r1.getString("class");
                        String Studentinfo3 = r1.getString("first_name");
                        String Queryinsert1 = "insert into attendance_" + Month1 + "_" + year1 + "(Class, Roll_no, Name) Values('" + Studentinfo2 + "', '" + Studentinfo1 + "', '" + Studentinfo3 + "');";

                        stmt.executeUpdate(Queryinsert1);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        String classname1 = CB_classaddattendance.getSelectedItem().toString();

        String Query_put_data_intable = "select * from attendance_" + Month1 + "_" + year1 + ";";

        DefaultTableModel model = (DefaultTableModel) Table_attendance.getModel();

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

            PreparedStatement stmt = con.prepareStatement(Query_put_data_intable);
            ResultSet r1 = stmt.executeQuery();

            Clearrows_Table_attendance();

            while (r1.next()) {
                String attendanceclass = r1.getString("Class");
                String attendancerollno = r1.getString("Roll_no");
                String attendancename = r1.getString("Name");
                String attendancedate = r1.getString("Date_" + day1);
                String Presentornot = "P";

                if ("0".equals(attendancedate)) {
                    Presentornot = "A";
                } else if ("2".equals(attendancedate)) {
                    Presentornot = "L";
                }

                if (attendanceclass == null ? classname1 == null : attendanceclass.equals(classname1)) {
                    model.addRow(new Object[]{attendancerollno, attendancename, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE});

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        jButton3.setVisible(true);

        //function ends here
    }//GEN-LAST:event_jButton2ActionPerformed

    int student_found_or_not(String Classnamestd, String Rollnostd) {
        int found = 0;

        String Query = "select * from fees_" + Classnamestd + ";";

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

            PreparedStatement stmt = con.prepareStatement(Query);
            ResultSet r1 = stmt.executeQuery();

            while (r1.next()) {
                String rollnogetter = r1.getString("Rollno");

                if (rollnogetter == null ? Rollnostd == null : rollnogetter.equals(Rollnostd)) {
                    found = 1;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        return found;
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Clearrows_attendance_info();

        String classname = CB_classattendanceinfo.getSelectedItem().toString();
        String Roll_no = TF_rollno.getText();

        int foundornot = student_found_or_not(classname, Roll_no);

        if (foundornot == 1) {

            int total_Leaves = 0;
            int total_Presents = 0;
            int total_Absents = 0;
            int total_Attendances = 0;
            float total_Persentage = 0;

            String Approve1 = "Not_Available";

            String get_months = CB_monthsinfo.getSelectedItem().toString();
            String month_checker = "attendance_" + get_months + "_" + year1;
            int i = 1;

            String Query_table_cheker1 = "select * from tables_info;";
            try {

                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

                PreparedStatement stmt = con.prepareStatement(Query_table_cheker1);
                ResultSet r1 = stmt.executeQuery();

                while (r1.next()) {
                    String attendanceinfo = r1.getString("Attendance_Available_for_Month");

                    if (attendanceinfo == null ? month_checker == null : attendanceinfo.equals(month_checker)) {
                        Approve1 = "Available";
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

//if statement
            if ("Available".equals(Approve1)) {
                try {

                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

                    Statement st = con.createStatement();
                    DatabaseMetaData md2 = con.getMetaData();

                    for (int k = 0; k < 31; k++) {
                        ResultSet rs = md2.getColumns(null, null, month_checker, "Date_" + i);

                        if (rs.next()) {

                            DefaultTableModel model11 = (DefaultTableModel) JTable_attendanceinfo.getModel();

                            String Query_table_checker1 = "select * from tables_info;";

                            //Variable for Month Availability
                            String Month_availableornot = "Not_Available";

                            try {

                                Class.forName("com.mysql.jdbc.Driver");

                                PreparedStatement stmt = con.prepareStatement(Query_table_checker1);
                                ResultSet r1 = stmt.executeQuery();

                                while (r1.next()) {
                                    String tablenames = r1.getString("Attendance_Available_for_Month");

                                    if (tablenames == null ? month_checker == null : tablenames.equals(month_checker)) {
                                        Month_availableornot = "Available";

                                    } else {
                                    }
                                }

                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, e);
                            }

                            if ("Available".equals(Month_availableornot)) {

                                String Query_fetching_attendance = "select * from " + month_checker + " where Roll_no = '" + Roll_no + "' AND Class = '" + classname + "';";

                                try {

                                    Class.forName("com.mysql.jdbc.Driver");

                                    PreparedStatement stmt = con.prepareStatement(Query_fetching_attendance);
                                    ResultSet r1 = stmt.executeQuery();

                                    int iii = i;

                                    while (r1.next()) {
                                        String Statuspora = r1.getString("Date_" + iii);
                                        String name = r1.getString("Name");
                                        total_Attendances++;

                                        switch (Statuspora) {
                                            case "0":
                                                total_Absents++;

                                                break;
                                            case "1":
                                                total_Presents++;
                                                break;
                                            case "2":
                                                total_Leaves++;
                                                break;
                                            default:
                                                break;
                                        }

                                        String attendance = null;
                                        if (null != Statuspora) {
                                            switch (Statuspora) {
                                                case "1":
                                                    attendance = "Present                                         ";
                                                    break;
                                                case "0":
                                                    attendance = "Absent                                          ";
                                                    break;
                                                case "2":
                                                    attendance = "Leave                                           ";
                                                    break;
                                                default:
                                                    break;
                                            }
                                        }

                                        Lable_name.setText(name);

                                        model11.addRow(new Object[]{i + " " + get_months, attendance});
                                        iii++;
                                    }

                                    i++;

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, e);

                                }
                            }
                        } else {
                            i++;

                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "This Month Attendance is Not Available");
            }

            total_Persentage = total_Presents * 100 / total_Attendances;

            TF_totalpresents.setText(Integer.toString(total_Presents));
            TF_totalabsents.setText(Integer.toString(total_Absents));
            TF_totalattendance.setText(Integer.toString(total_Attendances));
            TF_persentage.setText(Float.toString(total_Persentage));

        } else {
            JOptionPane.showMessageDialog(null, "Student Not found");
        }

        //function ends here
    }//GEN-LAST:event_jButton1ActionPerformed

    int values1_a;


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //Save button int the add attendance Tabbed Pane
        for (int i = 0; i < Table_attendance.getRowCount(); i++) {

            Object valuesp = Table_attendance.getValueAt(i, 2).toString();//present 
            Object valuesa = Table_attendance.getValueAt(i, 3).toString();//absent
            Object valuesl = Table_attendance.getValueAt(i, 4).toString();//leave

            String values2 = Table_attendance.getValueAt(i, 0).toString();//rollno
            String classname = CB_classaddattendance.getSelectedItem().toString();//class name 

            //these if statements checks that weather the student present/absent or on leave
            if (valuesp == "true") {
                values1_a = 1;
            }
            if (valuesa == "true") {
                values1_a = 0;
            }
            if (valuesl == "true") {
                values1_a = 2;
            }

            //this is the query that changes the student present/absent/leave
            String Query_attendance_change = "UPDATE attendance_" + Month1 + "_" + year1 + " SET Date_" + day1 + " = '" + values1_a + "' where Roll_no = '" + values2 + "' AND Class = '" + classname + "';";

            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/misc", "root", "");

                java.sql.Statement stmt = con.createStatement();
                stmt.executeUpdate(Query_attendance_change);

                con.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }

        JOptionPane.showMessageDialog(null, "Attendance SAVED Successfully");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void closingstudentattendance(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closingstudentattendance
        dispose();
        Main_Page.jButton3.setEnabled(true);
    }//GEN-LAST:event_closingstudentattendance

    private void Table_attendanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_attendanceMouseClicked

        int row = Table_attendance.getSelectedRow();
        int column = Table_attendance.getSelectedColumn();

        switch (column) {
            case 2:
                Table_attendance.setValueAt(Boolean.FALSE, row, 3);
                Table_attendance.setValueAt(Boolean.FALSE, row, 4);
                break;
            case 3:
                Table_attendance.setValueAt(Boolean.FALSE, row, 2);
                Table_attendance.setValueAt(Boolean.FALSE, row, 4);
                break;
            case 4:
                Table_attendance.setValueAt(Boolean.FALSE, row, 3);
                Table_attendance.setValueAt(Boolean.FALSE, row, 2);
                break;
            default:
                break;
        }


    }//GEN-LAST:event_Table_attendanceMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Student_Attendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Student_Attendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Student_Attendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Student_Attendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Student_Attendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CB_classaddattendance;
    private javax.swing.JComboBox<String> CB_classattendanceinfo;
    private javax.swing.JComboBox<String> CB_monthsinfo;
    private javax.swing.JTable JTable_attendanceinfo;
    private javax.swing.JLabel Lable_name;
    private javax.swing.JLabel TF_persentage;
    private javax.swing.JTextField TF_rollno;
    private javax.swing.JLabel TF_totalabsents;
    private javax.swing.JLabel TF_totalattendance;
    private javax.swing.JLabel TF_totalpresents;
    private javax.swing.JTable Table_attendance;
    private javax.swing.JPanel current_month;
    private javax.swing.JLabel date_lable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
